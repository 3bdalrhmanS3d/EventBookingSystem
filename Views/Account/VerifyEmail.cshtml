@model EventBookingSystemV1.DTOs.VerifyEmailDto
@{
    Layout = null;
    ViewData["Title"] = "Verify Email - Eventbookings";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet"
          crossorigin="anonymous" />
    <title>@ViewData["Title"]</title>
    <style>
        body {
            background: linear-gradient(135deg, #667eea, #764ba2);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .form-container {
            width: 550px;
            
            padding: 3.5rem;
            background: #fff;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);
            text-align: center;
        }

            .form-container h2 {
                font-size: 1.75rem;
                font-weight: 700;
                margin-bottom: 0.5rem;
            }

            .form-container p {
                margin-bottom: 1.5rem;
            }

        /* تكبير صناديق الأرقام */
        .code-inputs {
            display: flex;
            justify-content: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .code-box {
            width: 60px;
            height: 70px;
            font-size: 2rem;
            text-align: center;
            border: 2px solid #ccc;
            border-radius: 0.5rem;
            transition: border-color 0.2s;
        }

            .code-box.valid {
                border-color: #28a745;
            }

            .code-box.invalid {
                border-color: #dc3545;
            }

        /* زرّ التأكيد */
        .btn-verify {
            width: 100%;
            font-size: 1rem;
            padding: 0.75rem;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>Verify Your Account</h2>
        <p>We have sent a verification code to <strong>@Model.EmailAddress</strong>.</p>

        <form asp-action="VerifyEmail" method="post" id="verifyForm" autocomplete="off">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Token" id="Token" />
            <input asp-for="EmailAddress" type="hidden" />

            <div class="code-inputs">
                @for (int i = 1; i <= 7; i++)
                {
                    <input type="text"
                           maxlength="1"
                           class="code-box"
                           id="codeBox@i"
                           autocomplete="off"
                           pattern="\d"
                           inputmode="numeric" />
                }
            </div>

            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <button type="submit" class="btn btn-primary btn-verify" id="verifyBtn" disabled>
                Verify
            </button>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
          const boxes     = Array.from(document.querySelectorAll('.code-box'));
          const tokenIn   = document.getElementById('Token');
          const verifyBtn = document.getElementById('verifyBtn');

          boxes.forEach((box, idx) => {
            box.addEventListener('input', () => {
              const v = box.value;
              if (/^\d$/.test(v)) {
                box.classList.add('valid');
                box.classList.remove('invalid');
                if (idx < boxes.length - 1) boxes[idx + 1].focus();
              } else {
                box.value = '';
              }
              updateToken();
            });
            box.addEventListener('keydown', e => {
              if (e.key === 'Backspace' && box.value === '' && idx > 0) {
                boxes[idx - 1].focus();
              }
            });
          });

          function updateToken() {
            const code = boxes.map(b => b.value).join('');
            tokenIn.value = code;
            verifyBtn.disabled = (code.length < boxes.length);
          }

          // في حال وجود خطأ من السيرفر، نضع اللون الأحمر ونمسح القيم
        @if (ViewData.ModelState["Token"]?.Errors.Count > 0)
        {
            <text>
                boxes.forEach(b => {
                  b.value = '';
                  b.classList.add('invalid');
                });
                updateToken();
                boxes[0].focus();
            </text>
        }
        });
    </script>
</body>
</html>
