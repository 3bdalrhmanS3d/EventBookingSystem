@model EventBookingSystemV1.DTOs.VerifyEmailDto
@{
    Layout = null;
    ViewData["Title"] = "Verify Email - Eventbookings";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="/css/verify-email.css" rel="stylesheet" />
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="auth-container verify-container">
        <div class="auth-header">
            <div class="verification-icon">
                <i class="bi bi-envelope-check"></i>
            </div>
            <h1 class="auth-title">Verify Your Email</h1>
            <p class="auth-subtitle">We've sent a verification code to <strong>@Model.EmailAddress</strong></p>
        </div>

        <form asp-action="VerifyEmail" method="post" id="verifyForm" autocomplete="off">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Token" id="Token" />
            <input asp-for="EmailAddress" type="hidden" />

            <div class="code-inputs">
                @for (int i = 1; i <= 7; i++)
                {
                    <input type="text"
                           maxlength="1"
                           class="code-box"
                           id="codeBox@i"
                           autocomplete="off"
                           pattern="\d"
                           inputmode="numeric" />
                }
            </div>

            <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

            <button type="submit" class="btn btn-primary" id="verifyBtn" disabled>
                Verify Email
            </button>
        </form>

        <div class="auth-links">
            <div class="timer">Resend code in <span id="countdown">60</span> seconds</div>
            <a href="#" class="resend-link" id="resendLink" style="display: none;">Resend verification code</a>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const boxes = Array.from(document.querySelectorAll('.code-box'));
            const tokenIn = document.getElementById('Token');
            const verifyBtn = document.getElementById('verifyBtn');
            const countdownEl = document.getElementById('countdown');
            const resendLink = document.getElementById('resendLink');
            let countdown = 60;

            // Start countdown
            const timer = setInterval(() => {
                countdown--;
                countdownEl.textContent = countdown;
                if (countdown <= 0) {
                    clearInterval(timer);
                    document.querySelector('.timer').style.display = 'none';
                    resendLink.style.display = 'inline-block';
                }
            }, 1000);

            boxes.forEach((box, idx) => {
                box.addEventListener('input', () => {
                    const v = box.value;
                    if (/^\d$/.test(v)) {
                        box.classList.add('valid');
                        box.classList.remove('invalid');
                        if (idx < boxes.length - 1) boxes[idx + 1].focus();
                    } else {
                        box.value = '';
                    }
                    updateToken();
                });
                box.addEventListener('keydown', e => {
                    if (e.key === 'Backspace' && box.value === '' && idx > 0) {
                        boxes[idx - 1].focus();
                    }
                });
            });

            function updateToken() {
                const code = boxes.map(b => b.value).join('');
                tokenIn.value = code;
                verifyBtn.disabled = (code.length < boxes.length);
            }

            // In case of server error, highlight boxes in red and clear values
        @if (ViewData.ModelState["Token"]?.Errors.Count > 0)
        {
            <text>
                        boxes.forEach(b => {
                            b.value = '';
                            b.classList.add('invalid');
                        });
                        updateToken();
                        boxes[0].focus();
            </text>
        }

            // Focus first box on page load
            boxes[0].focus();
        });
    </script>
</body>
</html>